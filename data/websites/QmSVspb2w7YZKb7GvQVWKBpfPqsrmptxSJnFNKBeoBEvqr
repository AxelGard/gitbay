<!doctype html><html class="no-js" lang="en-us"><head><meta charset="utf-8"><meta http-equiv="x-ua-compatible" content="IE=edge"><meta name="viewport" content="width=device-width,initial-scale=1"><title>Running BlueOnyx with suPHP and WordPress | ParanoidPenguin.net</title><meta name="description" content="suPHP allows the execution of PHP scripts with the privileges of their owner. PHP scripts are no longer executed by the Apache user. This will be safer, but also more resource intensive. From a users point of view, the biggest advantage in terms of user friendliness is the fluent installation of plugins, updates and file uploads."><meta name="robots" content="noindex"><link rel="stylesheet" href="../../../css/main.css"><link rel="icon" type="image/png" sizes="32x32" href="../../../icons/32.png"><link rel="icon" type="image/png" sizes="192x192" href="../../../icons/192.png"></head><body><header class="header"><a class="logo" href="../../../">ParanoidPenguin.net</a></header><div class="primary"><main class="main"><div class="single block"><article class="post"><div class="post__meta meta mb"><time class="post__meta-published meta-published" datetime="2011-01-26T00:06:18">January 26, 2011</time></div><h1 class="post__title">Running BlueOnyx with suPHP and WordPress</h1><div class="post__content"><p>suPHP allows the execution of PHP scripts with the privileges of their owner. PHP scripts are no longer executed by the Apache user. This will be safer, but also more resource intensive. From a users point of view, the biggest advantage in terms of user friendliness is the fluent installation of plugins, updates and file uploads.</p><p>As the sysadmin, you’ll no longer have to chown folders or watch users implement the dreaded chmod 777 fix.</p><h2 id="site-configuration">Site configuration</h2><p>Create a new “Virtual Site”.<br>Select the following options from the PHP scripting menu:</p><ul><li>Enable PHP Scripting</li><li>Enable suPHP</li></ul><p>If suphp is to be activated for an existing virtual site, you have the option to do so from: Services > Web<br>Do not change any other PHP directives as these will be ignored.</p><p>Create a siteAdmin for your virtual site and assign this user the ownership for the web directory (Services> Web Ownership)<br>A siteAdmin user is required for suPHP to work properly.</p><p>Create a custom php.ini file for your virtual site by copying your global php configuration file located at <code>/etc/php.ini</code></p><p>Make the following changes for your custom php.ini file:<br>Find the directive: <code>memory_limit = xM</code><br>The memory limit needs to be increased to at least 30M (<code>memory_limit = 30M</code>)</p><h2 id="open_basedir-configuration">Open_basedir configuration</h2><p>Find the directive: <code>open_basedir = /tmp/:/var/lib/php/session/</code><br>To make this work you’ll have to append your virtual site’s root directory to allow file operations. It should look similiar to this:<br><code>/tmp/:/var/lib/php/session/:/home/.sites/xx/siteXXX/</code><br>(/home/.sites/xx/siteXXX/ is the path to your virtual site)</p><p>If you need PEAR you may append <code>:/usr/share/pear/</code></p><p>Upload your custom php.ini to your virtual site’s root directory <code>/home/.sites/xx/siteXXX</code>. I would recommend that the php.ini file is owned by the root user to avoid having the siteAdmin reconfiguring the PHP runtime directives, as this could potentially be troublesome.</p><h2 id="permalink-support">Permalink support</h2><p>In order to use the WordPress permalink option, mod_rewrite calls must be allowed for your virtual site.</p><p>As the root user navigate to the <code>/etc/httpd/conf/vhosts</code> directory.<br>Edit siteXXX.include and add the following set of rules:</p><pre>&lt;Directory "/home/.sites/xx/siteXXX/web"&gt;
AllowOverride All
Options -FollowSymLinks -Indexes
RewriteEngine On
&lt;/Directory&gt;
</pre><p>Make sure the directory actually points to your virtual site.</p><ul><li>Save the file and restart apache to load the new virtual site configuration.</li><li>Upload and install WordPress (as the siteAdmin).</li><li>Activate permalinks from the WordPress administrative settings.</li></ul><p>Upon saving the rewrite rules, your WordPress site will malfunction.<br>This is easy to fix, navigate to your virtual site’s web folder and chmod your new .htaccess file to 644. You wont have to redo this step if you are to change the rewrite rules at a later time.</p><p>Upgrading, installing themes and plugins should now work like a breeze.</p><figure><a href="../../../wp-content/uploads/2011/01/WordPress_1295966490441.png"><img src="../../../wp-content/uploads/2011/01/WordPress_1295966490441.png" alt="Wordpress plugin update"></a></figure><p>Some plugins require obscene amounts of memory and even the disabling of the Safe Mode directive.</p><h2 id="error-checking">Error Checking</h2><p>Make a php file with the following code: <code>&lt;?php phpinfo(); ?></code> and upload it to your virtual site.</p><p>Make sure the following directives have changed from their default configuration:</p><pre>
Server API = CGI/FastCGI
open_basedir = ...:/home/.sites/xx/siteXXX/
</pre><p>Investigate your apache log if all else fails.</p></div><footer class="post__footer"><div class="post__share share"></div></footer></article></div></main></div><footer class="footer"><div class="footer__static"><a href="../../../about/">About</a>|<a href="../../../archive/">Archive</a>|<a href="../../../privacy-policy/">Privacy policy</a>|<a href="../../../license/">License</a></div></footer></body></html>